#------------------------------------------------------------------------------
#                               Consts
#-----------------------------------------------------------------------------
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
SOCKET_PATH=/var/run/passenger
PID_PATH=${SOCKET_PATH}
ENV="production"

CONFIG_FILE=/etc/passenger-projects

RUNAS=passenger                         #user to run as

OK=0
ERROR=1
INF=255					#Inifinty 

#------------------------------------------------------------------------------
#                               Functions
#------------------------------------------------------------------------------

is_running() {
  if [ -f "$PID_PATH/$1.pid"  ]; then
    return $OK
  else
    return $ERROR
  fi
}


status(){
  if [ $# -eq 1 ]; then
    status_one $1
  else
    for i in ${PROJECTS[*]}; do
      status_one $i
    done
  fi
}

status_one() {
  if config_exists $1; then
    if is_running $1; then
      echo "$1 is started"
    else
      echo "$1 is not started"
    fi
  fi
}

start() {
  if [ $# -eq 1  ]; then
    start_one $1
  else
    for i in ${PROJECTS[*]}; do
      start_one $i
    done
  fi
}

start_one() {
  if is_running $1; then
    echo "$1 is already started"
  elif config_exists $1; then
    cfg.section.$1

    if [ -z $socket_path ]; then
      socket_path="${SOCKET_PATH}/${1}.socket"
    fi

    if [ -z $pid_path ]; then
      pid_path="${PID_PATH}/${1}.pid"
    fi

    if [ -z $user ]; then
      user=${RUNAS}
    fi

    if [ -z $env ]; then
      env="production"
    fi
    

    if [ -z $gemset ]; then
      rvm=''
    else
      rvm=" && rvm use ${gemset}"
    fi

    echo "Start $1..."
    cmd="passenger start $path -S $socket_path --pid-file $pid_path  -d -e $env"
    conf='source ~/.bashrc'
    su -c "${conf} ${rvm} && ${cmd}" $user
  fi
}

stop() {
  if [ $# -eq 1  ]; then
    if config_exists $1; then
      stop_one $1
    fi
  else
    for i in ${PROJECTS[*]}; do
      stop_one $i
    done
  fi
}

stop_one() {
  if $( ! is_running $1 ); then
   echo "$1 is already stopped"
  elif config_exists $1; then
    cfg.section.$1

    if [ -z $pid_path ]; then
      pid_path="${PID_PATH}/${1}.pid"
    fi

    if [ -z $user ]; then
      user=${RUNAS}
    fi
    
    if [ -z $gemset ]; then
      rvm=''
    else
      rvm=" && rvm use ${gemset}"
    fi

    echo "Stop $1..."
    cmd="passenger stop --pid-file $pid_path"
    conf='source ~/.bashrc'
    su -c "${conf} ${rvm} && ${cmd}" $user && rm ${pid_path}.lock
  fi
}

# Thanks to ajdiaz - http://ajdiaz.wordpress.com/2008/02/09/bash-ini-parser/
cfg_parser ()
{
    ini="$(<$1)"                # read the file
    ini="${ini//[/\[}"          # escape [
    ini="${ini//]/\]}"          # escape ]
    IFS=$'\n' && ini=( ${ini} ) # convert to line-array
    ini=( ${ini[*]//;*/} )      # remove comments with ;
    ini=( ${ini[*]/\    =/=} )  # remove tabs before =
    ini=( ${ini[*]/=\   /=} )   # remove tabs be =
    ini=( ${ini[*]/\ =\ /=} )   # remove anything with a space around =
    ini=( ${ini[*]/#\\[/\}$'\n'cfg.section.} ) # set section prefix
    ini=( ${ini[*]/%\\]/ \(} )    # convert text2function (1)
    ini=( ${ini[*]/=/=\( } )    # convert item to array
    ini=( ${ini[*]/%/ \)} )     # close array parenthesis
    ini=( ${ini[*]/%\\ \)/ \\} ) # the multiline trick
    ini=( ${ini[*]/%\( \)/\(\) \{} ) # convert text2function (2)
    ini=( ${ini[*]/%\} \)/\}} ) # remove extra parenthesis
    ini[0]="" # remove first element
    ini[${#ini[*]} + 1]='}'    # add the last brace
    eval "$(echo "${ini[*]}")" # eval the result
}

config_exists ()
{
  for i in ${PROJECTS[*]} 
  do
    if [ $1 = ${i} ]
    then
      return $OK;
    fi
  done
  
  echo "No configuration for ${1}, please add a section in ${CONFIG_FILE}"
  return $ERROR
}

# Projects to launch
cfg_parser ${CONFIG_FILE}
PROJECTS=($(declare -F | grep cfg.section | sed -e 's/declare -f cfg.section.//g'))

case "$1" in
  start)
	start $2
        ;;
  stop)
	stop $2
        ;;
  restart)
	stop $2
	start $2
        ;;
  status)
	status $2
	;;
  *)
	FULLPATH=/etc/init.d/passengers
	if [[ ! -f $FULLPATH ]]
	then
	   FULLPATH=/etc/rc.d/passengers
	fi

	echo "Usage: $FULLPATH {start|stop|restart|status} [project]"
	exit 1
	;;
esac

exit 0
