#------------------------------------------------------------------------------
#                               Consts
#-----------------------------------------------------------------------------
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
SOCKET_PATH=/var/run/passenger
PID_PATH=${SOCKET_PATH}

CONFIG_FILE=/etc/passenger-projects

RUNAS=passenger                         #user to run as

TRUE=1                                  #boolean
FALSE=0                                 #boolean
INF=255					#Inifinty 

#------------------------------------------------------------------------------
#                               Functions
#------------------------------------------------------------------------------

isRunning() {
  if [ -f "$PID_PATH/$1.pid"  ]; then
    return $TRUE
  else
    return $FALSE
  fi
}


status(){
  if [ $# -eq 1 ]; then
    status_one $1
  else
    for (( i=0; i<${#PROJECTS[@]}; i++  )); do
      status_one ${PROJECTS[i]}
    done
  fi
}

status_one() {
  if config_exists $1; then
    if isRunning $1; then
      echo "$1 is started"
    else
      echo "$1 is not started"
    fi
  fi
}

start() {
  if [ $# -eq 1  ]; then
    if config_exists $1; then
      start_one $1
    fi
  else
    for (( i=0; i<${#PROJECTS[@]}; i++  )); do      
      start_one ${PROJECTS[i]}
    done
  fi
}

start_one() {
  if isRunning $1; then
    echo "$2 is already started"
  else
    socket_path="${SOCKET_PATH}/${2}.socket"
    pid_path="${PID_PATH}/${2}.pid"
    echo "Start $2..."
    cmd="passenger start $1 -S $socket_path --pid-file $pid_path  -d -e production"
    rvm="rvm use $3"
    conf='source ~/.bashrc'
    su -c "${conf} && ${rvm} && ${cmd}" $RUNAS
  fi
}

stop() {
  if [ $# -eq 1  ]; then
    if config_exists $1; then
      stop_one $1
    fi
  else
    for (( i=0; i<${#PROJECTS[@]}; i++  )); do
      stop_one ${PROJECTS[i]}
    done
  fi
}

stop_one() {
  isRunning $1
  running=$?

  if isRunning $1; then
   echo "$1 is already stopped"
  else
    pid="$PID_PATH/$1.pid"
    echo "Stop $1..."
    cmd="passenger stop --pid-file $pid"
    su -c "${cmd}" $RUNAS && rm ${pid}.lock
  fi
}

# Thanks to ajdiaz - http://ajdiaz.wordpress.com/2008/02/09/bash-ini-parser/
cfg_parser ()
{
    ini="$(<$1)"                # read the file
    ini="${ini//[/\[}"          # escape [
    ini="${ini//]/\]}"          # escape ]
    IFS=$'\n' && ini=( ${ini} ) # convert to line-array
    ini=( ${ini[*]//;*/} )      # remove comments with ;
    ini=( ${ini[*]/\    =/=} )  # remove tabs before =
    ini=( ${ini[*]/=\   /=} )   # remove tabs be =
    ini=( ${ini[*]/\ =\ /=} )   # remove anything with a space around =
    ini=( ${ini[*]/#\\[/\}$'\n'cfg.section.} ) # set section prefix
    ini=( ${ini[*]/%\\]/ \(} )    # convert text2function (1)
    ini=( ${ini[*]/=/=\( } )    # convert item to array
    ini=( ${ini[*]/%/ \)} )     # close array parenthesis
    ini=( ${ini[*]/%\\ \)/ \\} ) # the multiline trick
    ini=( ${ini[*]/%\( \)/\(\) \{} ) # convert text2function (2)
    ini=( ${ini[*]/%\} \)/\}} ) # remove extra parenthesis
    ini[0]="" # remove first element
    ini[${#ini[*]} + 1]='}'    # add the last brace
    eval "$(echo "${ini[*]}")" # eval the result
}

config_exists ()
{
  declare -F "$1" > /dev/null 2>&1
  exists=$?
  if [ $exists -ne 0 ]; then
    echo "No configuration for ${1}, please add a section in ${CONFIG_FILE}"
  fi

  return $exists
}

# Projects to launch
cfg_parser ${CONFIG_FILE}
PROJECTS=($(declare -F | grep cfg.section | sed -e 's/declare -f cfg.section.//g'))

case "$1" in
  start)
	start $2
        ;;
  stop)
	stop $2
        ;;
  restart)
	stop $2
	start $2
        ;;
  status)
	status $2
	;;
  *)
	FULLPATH=/etc/init.d/passengers
	if [[ ! -f $FULLPATH ]]
	then
	   FULLPATH=/etc/rc.d/passengers
	fi

	echo "Usage: $FULLPATH {start|stop|restart|status} [project]"
	exit 1
	;;
esac

exit 0
